"use client";

import { X } from "lucide-react";
import Image from "next/image";
import { Button } from "../../ui/button";
import { Input } from "../../ui/input";
import { useRef, useState } from "react";
import "./fileDnd.css";

function DropTarget() {
  const [images, setImages] = useState([]);
  const [isDragging, setIsDragging] = useState(false);
  const fileInputRef = useRef();

  function selectFiles() {
    fileInputRef.current.click();
  }

  function onFileSelect(event) {
    const files = event.target.files;
    if (files.length === 0) return;
    for (let i = 0; i < files.length; i++) {
      if (files[i].type.split("/")[0] !== "image") continue;
      if (!images.some((e) => e.name === files[i].name)) {
        setImages((prevImages) => [
          ...prevImages,
          {
            name: files[i].name,
            url: URL.createObjectURL(files[i]),
          },
        ]);
      }
    }
  }

  function deleteImage(index) {
    setImages((prevImages) => prevImages.filter((_, i) => i !== index));
  }

  function onDragOver(event) {
    event.preventDefault();
    setIsDragging(true);
    event.dataTransfer.dropEffect = "copy";
  }

  function onDragLeave(event) {
    event.preventDefault();
    setIsDragging(false);
  }

  function onDrop(event) {
    event.preventDefault();
    setIsDragging(false);
    const files = event.dataTransfer.files;
    // Handle dropped files here, similar to onFileSelect
    onFileSelect({ target: { files } });
  }

  return (
    <div className="card">
      <div className="top">
        <p>Drag & Drop image uploading</p>
      </div>
      <div
        className="drag-area"
        onDragOver={onDragOver}
        onDragLeave={onDragLeave}
        onDrop={onDrop}
      >
        {isDragging ? (
          <span className="select">Drop images here</span>
        ) : (
          <>
            Drag & Drop image here or{" "}
            <span className="select" onClick={selectFiles}>
              Browse
            </span>
          </>
        )}
        <input
          type="file" // This should be 'file' to allow file selection
          ref={fileInputRef}
          onChange={onFileSelect}
          name="file"
          className="file"
          multiple
        />
      </div>
      <div className="container">
        {images.map((image, index) => (
          <div key={index} className="image">
            <span className="delete" onClick={() => deleteImage(index)}>
              <X size={16} />
            </span>
            <Image
              width={500}
              height={500}
              src={image.url}
              alt={image.name}
              className="w-full h-full rounded-lg"
            />
          </div>
        ))}
      </div>
      <Button type="submit" className="button">
        Upload
      </Button>
    </div>
  );
}

export default DropTarget;


///home page

import Icons from "@/components/pages/root/icons";
import NewsRew from "@/components/pages/root/news-rew";
import OurLicenses from "@/components/pages/root/our-licenses";
import Partners from "@/components/pages/root/partners";
import AllCategories from "@/components/shared/allCategories";
import AllProducts from "@/components/shared/allProducts";
import Banner from "@/components/shared/banner";
import db from "@/db/db";
import { ApiService } from "@/lib/api.services";
import { getLastItems, getRandomItems } from "@/lib/utils";
import axios from "axios";
import { Suspense } from "react";

async function Home() {
  // const products = await db.product.findMany();
  const products = await ApiService.getData("/api/product", "home");
  // const categories = await db.category.findMany({
  //   include: {
  //     products: true,
  //   },
  // });
  const categories = await ApiService.getData("/api/category", "home");
  const topCategories = await db.topCategory.findMany();
  // const topCategories = await ApiService.getData("/api/topCategory", "home");

  // const sertificate = await db.sertificate.findMany();
  const sertificate = await ApiService.getData("/api/sertificate", "home");
  // const license = await db.license.findMany();
  const license = await ApiService.getData("/api/license", "home");
  // const partner = await db.partner.findMany();
  const partner = await ApiService.getData("/api/partner", "home");
  // const newsData = await db.news.findMany();
  const newsData = await ApiService.getData("/api/news", "home");
  // const reviews = await db.reviews.findMany();
  const reviews = await ApiService.getData("/api/reviews", "home");
  // const currency = await db.currency.findMany();
  const currency = await ApiService.getData("/api/currency", "home");

  // const banner = await db.banner.findMany();
  const banner = await ApiService.getData("/api/banner", "home");

  const bannerProduct = await Promise.all(
    banner.map(async (item) => {
      // const getProducts = await db.product.findMany({
      //   where: { id: Number(item.productId) },
      // });
      const getProducts = ApiService.getData(
        `/api/product?id=${Number(item.productId) }`,
        "home"
      );
      return { ...item, product: getProducts[0] };
    })
  );

  const randomLicense = getRandomItems(license);
  const randomReviews = getRandomItems(reviews);

  const lastProducts = getLastItems(products, 4);
  const lastNews = getLastItems(newsData, 10);

  return (
    <div className="min-h-[50%] py-10 flex flex-col space-y-10 items-center justify-center">
      <Suspense>
        <Banner
          productData={bannerProduct}
          categories={categories}
          currency={currency}
        />
        <AllCategories categories={categories} topCategories={topCategories} />
        <AllProducts
          products={lastProducts}
          categories={categories}
          currency={currency}
        />
        <Icons />
        <OurLicenses sertificate={sertificate} license={randomLicense} />
        <Partners partner={partner} />
        <NewsRew newsItem={lastNews} reviews={randomReviews} />
      </Suspense>
    </div>
  );
}

export default Home;
